while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", beta, "이다.\n")
}
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0) ,
tol = 1e - 7) {
iters <- 0
diffrence <- 0
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", beta, "이다.\n")
}
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e - 7) {
iters <- 0
diffrence <- 0
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", beta, "이다.\n")
}
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e - 7) {
iters <- 0
diffrence <- 0
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", beta, "이다.\n")
}
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
iters <- 0
diffrence <- 0
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", beta, "이다.\n")
}
gradient_descent(cars$speed, cars$dist,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7)
gradient_descent(cars$speed, cars$dist,
max_iter = 5000,
lamda = 0.00001,
beta = c(1, 1),
tol = 1e-7)
gradient_descent(cars$speed, cars$dist,
max_iter = 5000,
lamda = 0.00001,
beta = c(7, 7),
tol = 1e-7)
lm(cars$dist ~ cars$speed)
gradient_descent(cars$speed, cars$dist)
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
iters <- 0
diffrence <- 1
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", beta, "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
lm(cars$dist ~ cars$speed)
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
iters <- 0
diffrence <- 1
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = "beta[1],",beta1 = "beta[2], "이다.\n")
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
iters <- 0
diffrence <- 1
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
grad_fun <- function(x, y, beta) {
X <- cbind(1, x)
(t(X) %*% X %*% beta) - (t(X) %*% y)
}
obj_fun <- function(x, y, beta) {
X <- cbind(1, x)
t(y - X %*% beta) %*% (y - X)
}
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
gradient_descent <- function(x, y,
max_iter = 5000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
browser()
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
gd_linreg <- function(x, y,
max_iters = 50000,
bvec = c(0, 0),
lambda = 0.0001,
tol = 1e-7) {
iters <- 0
# loss_init <- obj_fun(x, y, bvec)
converge = FALSE
while(iters < max_iters & converge == FALSE) {
gvec <- grad_fun(x, y, bvec)
loss_ob <- obj_fun(x, y, bvec)
bnew <- bvec - lambda * gvec
loss_nb <- obj_fun(x, y, bnew)
iters <- iters + 1
bvec <- bnew
if (abs(loss_ob - loss_nb) < tol) converge = TRUE
}
cat(iters, " iteration.\n")
return(bvec)
}
gd_linreg(cars$speed, cars$dist)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
function(x, y,
max_iter = 50000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
browser()
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent <- function(x, y,
max_iter = 50000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
#browser()
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
gd_linreg(cars$speed, cars$dist)
gradient_descent <- function(x, y,
max_iter = 5000000000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
#browser()
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
gradient_descent <- function(x, y,
max_iter = 5000^10000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
#browser()
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
gradient_descent <- function(x, y,
max_iter = 9999^99999,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
#browser()
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
gradient_descent <- function(x, y,
max_iter = 50000,
lamda = 0.00001,
beta = c(0, 0),
tol = 1e-7) {
#browser()
iters <- 0
diffrence <- Inf
while(diffrence > tol & iters < max_iter) {
grad <- grad_fun(x, y, beta)
obj_o <- obj_fun(x, y, beta)
beta.new <- beta - lamda * grad
obj_n <- obj_fun(x, y, beta.new)
diffrence <- abs(obj_o - obj_n)
iters <- iters + 1
beta <- beta.new
}
cat("추정된 회귀계수는", "beta0 = ",beta[1],",beta1 = ",beta[2], "이다.\n")
}
gradient_descent(cars$speed, cars$dist)
numberNeedSim <- function(seed = NULL,
reps = 10000){
#browser()
seed <- set.seed(seed)
X <- rep(NULL, reps = reps)
for(a in 1:reps){
x1 <- runif(1, 0, 1)
x <- rep(NULL,reps = reps)
i <- 1
while(x1 <= 1){
x[i] <- runif(1, 0, 1)
x1 <- x1 + x[i]
i <- i + 1
}
X[a] <- i
}
tab.X <- table(X)
p.table <- prop.table(tab.X)
print(tab.X)
print(p.table)
cat("X의 기댓값은", mean(X), "\n.")
}
numberNeed()
numberNeedSim <- function(target = 1, reps = 1000,
seed = NULL, verbose = FALSE)
{
if (!is.null(seed)) set.seed(seed)
need <- rep(NA, reps)
for (i in 1:reps) need[i] <- numberNeed(target = target)
if (verbose) {
print(prop.table(table(need)))
cat("\n")
cat(sprintf("총합이 %d 보다 크기 위해 필요한 난수의 개수에 대한 기댓값은 %.3f 임.",
target, mean(need)), "\n", sep = "")
}
invisible(mean(need))
}
numberNeedSim(target = 1, reps = 10000, seed = 1234, verbose = TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
numberNeed <- function(target = 1) {
count <- 0
csum <- 0
while (csum < target) {
picked_num <- runif(1)
csum <- csum + picked_num
count <- count + 1
}
return(count)
}
numberNeedSim <- function(target = 1, reps = 1000,
seed = NULL, verbose = FALSE)
{
if (!is.null(seed)) set.seed(seed)
need <- rep(NA, reps)
for (i in 1:reps) need[i] <- numberNeed(target = target)
if (verbose) {
print(prop.table(table(need)))
cat("\n")
cat(sprintf("총합이 %d 보다 크기 위해 필요한 난수의 개수에 대한 기댓값은 %.3f 임.",
target, mean(need)), "\n", sep = "")
}
invisible(mean(need))
}
numberNeedSim(target = 1, reps = 10000, seed = 1234, verbose = TRUE)
numberNeedSim <- function(seed = NULL,
reps = 10000){
#browser()
seed <- set.seed(seed)
X <- rep(NULL, reps = reps)
for(a in 1:reps){
x1 <- runif(1, 0, 1)
x <- rep(NULL,reps = reps)
i <- 1
while(x1 <= 1){
x[i] <- runif(1, 0, 1)
x1 <- x1 + x[i]
i <- i + 1
}
X[a] <- i
}
tab.X <- table(X)
p.table <- prop.table(tab.X)
print(p.table)
cat("X의 기댓값은", mean(X), "\n.")
}
numberNeedSim <- function(target = 1, reps = 1000,
seed = NULL, verbose = FALSE)
{
if (!is.null(seed)) set.seed(seed)
need <- rep(NA, reps)
for (i in 1:reps) need[i] <- numberNeed(target = target)
if (verbose) {
print(prop.table(table(need)))
cat("\n")
cat(sprintf("총합이 %d 보다 크기 위해 필요한 난수의 개수에 대한 기댓값은 %.3f 임.",
target, mean(need)), "\n", sep = "")
}
invisible(mean(need))
}
numberNeedSim <- function(seed = NULL,
reps = 10000){
#browser()
seed <- set.seed(seed)
X <- rep(NULL, reps = reps)
for(a in 1:reps){
x1 <- runif(1, 0, 1)
x <- rep(NULL,reps = reps)
i <- 1
while(x1 <= 1){
x[i] <- runif(1, 0, 1)
x1 <- x1 + x[i]
i <- i + 1
}
X[a] <- i
}
tab.X <- table(X)
p.table <- prop.table(tab.X)
print(p.table)
cat("X의 기댓값은", mean(X), "\n.")
}
numberNeedSim(target = 1, reps = 10000, seed = 1234, verbose = TRUE)
numberNeedSim <- function(seed = NULL,
reps = 10000){
#browser()
seed <- set.seed(seed)
X <- rep(NULL, reps = reps)
for(a in 1:reps){
x1 <- runif(1, 0, 1)
x <- rep(NULL,reps = reps)
i <- 1
while(x1 <= 1){
x[i] <- runif(1, 0, 1)
x1 <- x1 + x[i]
i <- i + 1
}
X[a] <- i
}
tab.X <- table(X)
p.table <- prop.table(tab.X)
print(p.table)
cat("X의 기댓값은", mean(X), "\n.")
}
numberNeedSim(12345)
knitr::opts_chunk$set(echo = TRUE)
data <- read.table("data/canadian.txt", header=TRUE, sep="\t")
getwd()
